"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const etherlime_utils_1 = require("etherlime-utils");
const etherlime_logger_1 = require("etherlime-logger");
const deployer_1 = require("./deployer");
class PrivateKeyDeployer extends deployer_1.default {
    /**
     * Instantiates new deployer with deployer wallet/signer instance based on privateKey. You probably should not use this class directly but use something inheriting this as it gives you provider options too
     * @param {*} privateKey the private key for the deployer wallet/signer instance
     * @param {*} provider the ethers.provider instance
     * @param {*} defaultOverrides [Optional] default deployment overrides
     */
    constructor(privateKey, provider, defaultOverrides) {
        const sanitizedPrivateKey = (privateKey.startsWith('0x')) ? privateKey : `0x${privateKey}`;
        const signer = new ethers_1.Wallet(sanitizedPrivateKey, provider);
        super(signer, provider, defaultOverrides);
        etherlime_logger_1.logger.log(`Deployer set to deploy from address: ${etherlime_utils_1.colors.colorAddress(this.signer.address)}\n`);
    }
    setPrivateKey(privateKey) {
        const sanitizedPrivateKey = (privateKey.startsWith('0x')) ? privateKey : `0x${privateKey}`;
        const signer = new ethers_1.Wallet(sanitizedPrivateKey, this.provider);
        this.setSigner(signer);
    }
    toString() {
        return `Deployer set to deploy from address: ${etherlime_utils_1.colors.colorAddress(this.signer.address)}`;
    }
}
exports.default = PrivateKeyDeployer;
//# sourceMappingURL=private-key-deployer.js.map