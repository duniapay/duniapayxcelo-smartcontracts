"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const etherlime_utils_1 = require("etherlime-utils");
const etherlime_logger_1 = require("etherlime-logger");
const private_key_deployer_1 = require("./../private-key-deployer");
const COVERAGE_PROVIDER_INDEX = 1; // This is the index of the desired provider located in global.providers. We have two providers there: one for coverage which is listening for blocks and one for deploying contracts
class JSONRPCPrivateKeyDeployer extends private_key_deployer_1.default {
    constructor(privateKey, nodeUrl, defaultOverrides) {
        let localNodeProvider;
        JSONRPCPrivateKeyDeployer._validateUrlInput(nodeUrl);
        if (global.coverageSubprovider) {
            global.provider._providers[COVERAGE_PROVIDER_INDEX].rpcUrl = typeof nodeUrl === "string" ? nodeUrl : nodeUrl.url;
            localNodeProvider = new ethers_1.providers.Web3Provider(global.provider);
            localNodeProvider.connection.url = typeof nodeUrl === "string" ? nodeUrl : nodeUrl.url;
        }
        else {
            localNodeProvider = new ethers_1.providers.JsonRpcProvider(nodeUrl);
        }
        super(privateKey, localNodeProvider, defaultOverrides);
        this.nodeUrl = typeof nodeUrl === "string" ? nodeUrl : nodeUrl.url;
        ;
        etherlime_logger_1.logger.log(`JSONRPC Deployer Network: ${etherlime_utils_1.colors.colorNetwork(this.nodeUrl)}`);
    }
    setNodeUrl(nodeUrl) {
        JSONRPCPrivateKeyDeployer._validateUrlInput(nodeUrl);
        const localNodeProvider = new ethers_1.providers.JsonRpcProvider(nodeUrl);
        this.setProvider(localNodeProvider);
        this.nodeUrl = nodeUrl;
    }
    static _validateUrlInput(nodeUrl) {
        if (!(etherlime_utils_1.isUrl(nodeUrl)) && !etherlime_utils_1.isUrl(nodeUrl.url)) {
            throw new Error(`Passed contract url (${nodeUrl}) is not valid url`);
        }
    }
    toString() {
        const superString = super.toString();
        return `Network: ${etherlime_utils_1.colors.colorNetwork(this.nodeUrl)}\n${superString}`;
    }
}
exports.default = JSONRPCPrivateKeyDeployer;
//# sourceMappingURL=jsonrpc-private-key-deployer.js.map