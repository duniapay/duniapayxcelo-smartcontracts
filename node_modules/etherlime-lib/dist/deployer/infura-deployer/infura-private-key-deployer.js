"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const private_key_deployer_1 = require("./../private-key-deployer");
const etherlime_utils_1 = require("etherlime-utils");
const etherlime_logger_1 = require("etherlime-logger");
class InfuraPrivateKeyDeployer extends private_key_deployer_1.default {
    constructor(privateKey, network, apiKey, defaultOverrides) {
        const infuraNetwork = ethers_1.utils.getNetwork(network);
        const infuraProvider = new ethers_1.providers.InfuraProvider(infuraNetwork, apiKey);
        super(privateKey, infuraProvider, defaultOverrides);
        etherlime_logger_1.logger.log(`Deployer set to Infura. Network: ${etherlime_utils_1.colors.colorNetwork(network)} with API Key: ${etherlime_utils_1.colors.colorAPIKey(apiKey)}\n`);
        this.network = network;
        this.apiKey = apiKey;
    }
    setNetwork(network) {
        const infuraNetwork = ethers_1.utils.getNetwork(network);
        const infuraProvider = new ethers_1.providers.InfuraProvider(infuraNetwork, this.apiKey);
        this.setProvider(infuraProvider);
        this.network = network;
    }
    setApiKey(apiKey) {
        const infuraNetwork = ethers_1.utils.getNetwork(this.network);
        const infuraProvider = new ethers_1.providers.InfuraProvider(infuraNetwork, apiKey);
        this.setProvider(infuraProvider);
        this.apiKey = apiKey;
    }
    toString() {
        const superString = super.toString();
        return `Deployer set to Infura. Network: ${etherlime_utils_1.colors.colorNetwork(this.network)} with API Key: ${etherlime_utils_1.colors.colorAPIKey(this.apiKey)}\n${superString}`;
    }
}
exports.default = InfuraPrivateKeyDeployer;
//# sourceMappingURL=infura-private-key-deployer.js.map